Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.16.0.0/16

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProjectFaultVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-b

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [3, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-c

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ProjectFaultIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: ProjectFaultRouteTable

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  AssociateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref MyRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable SSH and HTTP access via port 22 IPv4 & port 80 IPv4
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - Description: 'Allow EC2 to communicate with DB'
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  MyParameterStoreAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyParameterStoreAccessRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  MyParameterStoreAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MyParameterStoreAccessPolicy
      Roles:
        - !Ref MyParameterStoreAccessRole
      PolicyDocument:
        # TODO: add interpolation for different regions and account ID for each statement below
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - arn:aws:ssm:us-east-1:655948565243:parameter/project-fault/prod/*

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref MyParameterStoreAccessRole

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: project-fault-launch-template
      VersionDescription: Version 1.0
      LaunchTemplateData:
        # TODO: Add conditions for different regions
        ImageId: ami-03a6eaae9938c858c
        InstanceType: t2.micro
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 25
              VolumeType: gp3
              Iops: 3000
        SecurityGroupIds:
          - !GetAtt InstanceSecurityGroup.GroupId
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn
        # TODO: running python3 /home/ec2-user/ProjectFault/init_db.py relies on endpoint variable
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y nginx git python-pip postgresql-devel python3-devel gcc 
            git clone https://github.com/APysnack/ProjectFault.git /home/ec2-user/ProjectFault
            su - ec2-user -c "cd /home/ec2-user && python3 -m venv projectFaultVenv"
            systemctl start nginx
            systemctl enable nginx
            cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
            mv /home/ec2-user/ProjectFault/nginx.conf /etc/nginx/nginx.conf
            systemctl reload nginx
            cd /home/ec2-user/ProjectFault
            source /home/ec2-user/projectFaultVenv/bin/activate
            pip3 install --upgrade pip
            pip3 install -r requirements.txt
            mv /home/ec2-user/ProjectFault/application/prod_config.py /home/ec2-user/ProjectFault/application/config.py
            /home/ec2-user/projectFaultVenv/bin/gunicorn app:app -b 127.0.0.1:8000

  ProjectFaultASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '0'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
        - !Ref EC2TargetGroup

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref MyVPC

  # TODO: Switch to https
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: pf-subnet-group
      DBSubnetGroupDescription: Project Fault Subnet Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CopyTagsToSnapshot: false
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: projectFaultDB
      DBName: projectFaultDB
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: password
      MultiAZ: false
      # TODO: Set to false and add a NACL to allow private communication between EC2 and RDS
      PubliclyAccessible: true
      StorageType: gp2
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: project-fault-media
