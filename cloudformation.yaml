Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.16.0.0/16

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProjectFaultVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-b

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [3, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: projectfault-app-az-c

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ProjectFaultIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: ProjectFaultRouteTable

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  AssociateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref MyRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable SSH and HTTP access via port 22 IPv4 & port 80 IPv4
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - Description: 'Allow EC2 to communicate with DB'
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
        - Description: 'Allow local ip to communicate with DB'
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 98.204.58.188/32

  MyParameterStoreAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MyParameterStoreAccessPolicy
      Roles:
        - !Ref MyParameterStoreAccessRole
      PolicyDocument:
        # TODO: add interpolation for different regions and account ID for each statement below
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - arn:aws:ssm:us-east-1:655948565243:parameter/project-fault/prod/*

  MyParameterStoreAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyParameterStoreAccessRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      Roles:
        - !Ref CodeDeployRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:RunInstances
              - ec2:CreateTags
              - iam:PassRole
            Resource: '*'

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref MyParameterStoreAccessRole

  MyLaunchTemplate:
    DependsOn: RdsEndpointParameter
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: project-fault-launch-template
      VersionDescription: Version 1.0
      LaunchTemplateData:
        # TODO: Add conditions for different regions
        ImageId: ami-03a6eaae9938c858c
        InstanceType: t2.micro
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 25
              VolumeType: gp3
              Iops: 3000
        SecurityGroupIds:
          - !GetAtt InstanceSecurityGroup.GroupId
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn

        # TODO: possible race condition between moving config.py and running gunicorn?
        # codedeploy bucket name in wget command should be dynamic (replace us-east-1 with a variable)
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y nginx git python-pip postgresql-devel python3-devel gcc ruby wget
            git clone https://github.com/APysnack/ProjectFault.git /home/ec2-user/ProjectFault
            su - ec2-user -c "cd /home/ec2-user && python3 -m venv projectFaultVenv"
            cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
            mv /home/ec2-user/ProjectFault/nginx.conf /etc/nginx/nginx.conf
            systemctl start nginx
            systemctl enable nginx
            cd /home/ec2-user/ProjectFault
            wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            source /home/ec2-user/projectFaultVenv/bin/activate
            pip3 install --upgrade pip
            pip3 install -r requirements.txt
            mv /home/ec2-user/ProjectFault/application/prod_config.py /home/ec2-user/ProjectFault/application/config.py
            python3 /home/ec2-user/ProjectFault/init_db.py
            /home/ec2-user/projectFaultVenv/bin/gunicorn app:app -b 127.0.0.1:8000

  ProjectFaultASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '0'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
        - !Ref EC2TargetGroup

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref MyVPC

  # TODO: Switch to https
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: pf-subnet-group
      DBSubnetGroupDescription: Project Fault Subnet Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: AttachGateway
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CopyTagsToSnapshot: false
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: projectFaultDB
      DBName: projectFaultDB
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: password
      MultiAZ: false
      # TODO: Set to false and add a NACL to allow private communication between EC2 and RDS
      PubliclyAccessible: true
      StorageType: gp2
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  # TODO: Make bucket private and serve via the application?
  # I might prefer this media to be public
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: project-fault-media
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: MyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::${MyS3Bucket}/*

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: project-fault-codepipeline-artifacts

  RdsEndpointParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/project-fault/prod/RDS_ENDPOINT'
      Type: 'String'
      Value: !GetAtt MyRDSInstance.Endpoint.Address

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: project-fault-app

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: project-fault-deployment-group
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      AutoScalingGroups:
        - !Ref ProjectFaultASG
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt EC2TargetGroup.TargetGroupName
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: project-fault-build-test
      Description: project fault codebuild project
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: project-fault-build-logs
          StreamName: project-fault-build-log-stream
      ServiceRole: !GetAtt CodeBuildRole.Arn

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole

  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: policy
      Roles:
        - Ref: CodePipelineRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - iam:PassRole
            Resource: '*'
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: '*'
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: '*'
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: '*'
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: '*'
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: '*'
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: '*'
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: '*'
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: '*'
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: '*'
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: '*'
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: '*'
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
            Resource: '*'
          - Effect: Allow
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Resource: '*'

  MyCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: pf-test-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: 'arn:aws:codestar-connections:us-east-1:655948565243:connection/d7646f2a-d662-419a-9d97-5205f531467f'
                FullRepositoryId: 'apysnack/ProjectFault'
                BranchName: 'main'
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              # TODO: ProjectName is hardcoded
              Configuration:
                ProjectName: project-fault-build-test
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: pf-deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: project-fault-app
                DeploymentGroupName: project-fault-deployment-group
              InputArtifacts:
                - Name: BuildArtifact
      RestartExecutionOnUpdate: true

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogStream
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSecurityGroupReferences
              - ec2:DescribeSecurityGroupRules
              - ec2:DescribeSubnets
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeVpcs
              - ec2:DescribeInstances
              - ec2:DescribeKeyPairs
              - ec2:DescribeRouteTables
              - ec2:DescribeNetworkAcls
              - ec2:CreateTags
      Roles:
        - !Ref CodeBuildRole

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DescribeSecurityGroupsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroupRules
                  - ec2:DescribeSubnets
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeVpcs
                Resource: '*'
